package problems;

import java.util.ArrayList;
import java.util.List;

//Question -----------------------------------------------------------------------------------------------------------------------
//	Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
//	
//	1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
//	
//	It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
//	
//	Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
//---------- -----------------------------------------------------------------------------------------------------------------------
// Solution correct

public class Problem44 {

	public static void main(String[]args) {

        ArrayList<Long> currentList = new ArrayList<>();
        boolean answerFound = false;
        int currentRange = 0;
		long currentSmallestDifference = 0;

        // This while loop goes through, continually adding a new number to the list of pentagonal numbers and then
        // traversing the list from right to left checking if the number-pairs are pentagonal. If it finds a pentagonal
        // pair, a solution has been found, and now the only thing left to do is to make sure there are no other solutions
		while(!answerFound) {
			currentRange++;
			currentList.add(generatePentagonalNumber(currentRange));
			for(int i = currentRange - 2; i >= 0; i--) {
				if(checkPentagonalPair(currentList.get(currentRange - 1) , currentList.get(i))) {
                    answerFound = true;
					currentSmallestDifference = currentList.get(currentRange - 1) - currentList.get(i);
                    break;                                                                                   // break because no point checking any more to the left, the difference will be bigger guaranteed
                }
			}
		}

        // In this loop, we continue expanding the range and adding numbers to check if there is another solution with a
        // a smaller difference. Once you add a new number to the group, and the difference is too big with the number
        // right to the left of it, you can stop checking
		while(true) {
            currentList.add(generatePentagonalNumber(currentRange + 1));
			if(currentList.get(currentRange) - currentList.get(currentRange - 1) > currentSmallestDifference) {
				break;
			}
			for(int i = currentRange - 1; (currentList.get(currentRange) - currentList.get(i)) < currentSmallestDifference; i--) {
				if(checkPentagonalPair(currentList.get(currentRange) , currentList.get(i))) {
					currentSmallestDifference = currentList.get(currentRange) - currentList.get(i);
					break;
				}
			}
            currentRange++;
		}
		System.out.println(currentSmallestDifference);
	}

    // Returns true if both the sum and the difference of the two numbers are pentagonal
	private static boolean checkPentagonalPair(long pent1, long pent2) {
		return isPentagonal(pent1 - pent2) && isPentagonal(pent1 + pent2);
	}

    // Returns: true if number is pentagonal, false otherwise
	private static boolean isPentagonal(long number) {
		long n =  (long)((Math.sqrt(24 * number + 1) + 1) / 6);
		return ((n * (3*n - 1) / 2) == number);
	}

	private static long generatePentagonalNumber(long n) {
		return n * (3 * n - 1) / 2;
	}
}
